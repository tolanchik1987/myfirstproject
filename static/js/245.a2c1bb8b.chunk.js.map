{"version":3,"file":"static/js/245.a2c1bb8b.chunk.js","mappings":"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","sources":["webpack://myfirstproject/./src/components/Login/Login.module.css?3530","components/Login/LoginForm.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper_formLogin\":\"Login_wrapper_formLogin__Yb6xR\",\"formLogin_conteiner\":\"Login_formLogin_conteiner__9E0gb\",\"btn_submit\":\"Login_btn_submit__fQ7YS\",\"checkbox_showPassword\":\"Login_checkbox_showPassword__kuBN0\",\"loginConteiner\":\"Login_loginConteiner__pANAN\",\"checkbox_rememberMy\":\"Login_checkbox_rememberMy__-EEB1\"};","import React from \"react\";\r\nimport classes from \"./Login.module.css\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { connect } from \"react-redux\";\r\nimport { login, logout } from \"../redax/authReducer\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport styled, { keyframes } from \"styled-components\";\r\nimport { wobble } from \"react-animations\";\r\n\r\nconst flashAnimation = keyframes`${wobble}`;\r\n\r\nconst BouncyDiv = styled.div`\r\n   animation: 1s ${flashAnimation};\r\n`;\r\n\r\nfunction LoginForm(props) {\r\n   const {\r\n      register,\r\n      handleSubmit,\r\n      reset,\r\n      formState,\r\n      formState: { errors, submittedData, isValid },\r\n   } = useForm({\r\n      mode: \"onChange\",\r\n   });\r\n\r\n   const onSubmit = (data) => {\r\n      props.login(\r\n         data.email,\r\n         data.password,\r\n         data.rememberMe,\r\n         data.captcha,\r\n      );\r\n      let q = document.getElementById(\"showPassword\");\r\n      q.checked = false;\r\n      let x = document.getElementById(\"password\");\r\n      x.type = \"password\";\r\n   };\r\n\r\n   React.useEffect(() => {\r\n      if (formState.isSubmitSuccessful) {\r\n         reset({ email: \"\", password: \"\", rememberMe: false, captcha: \"\" });\r\n      }\r\n   }, [formState, submittedData, reset]);\r\n\r\n   if (props.isAuth) {\r\n      return <Navigate replace to={\"/profile\"} />;\r\n   }\r\n\r\n   const showPassword = () => {\r\n      let x = document.getElementById(\"password\");\r\n      if (x.type === \"password\") {\r\n         x.type = \"text\";\r\n      } else {\r\n         x.type = \"password\";\r\n      }\r\n   };\r\n\r\n   return (\r\n      <div className={classes.wrapper_formLogin}>\r\n         <BouncyDiv>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n               <div className={classes.formLogin_conteiner}>\r\n                  <h1>Sing in</h1>\r\n                  <span>{props.messageError}</span>\r\n\r\n                  <div className={classes.loginConteiner}>\r\n                     <label htmlFor=\"email\">Login</label>\r\n                     <input\r\n                        name={\"email\"}\r\n                        placeholder={\"enter email\"}\r\n                        {...register(\"email\", {\r\n                           required: \"Это поле обязательно!\",\r\n                           minLength: {\r\n                              value: 5,\r\n                              message: \"Минимум 5 символов!\",\r\n                           },\r\n                           maxLength: {\r\n                              value: 40,\r\n                              message: \"Максимум 20 символов!\",\r\n                           },\r\n                        })}\r\n                     />\r\n                     {errors?.email && (\r\n                        <span> {errors?.email?.message || \"Error!\"} </span>\r\n                     ) }\r\n                  </div>\r\n                  <div className={classes.loginConteiner}>\r\n                     <label htmlFor=\"password\">Password</label>\r\n                     <input\r\n                        name={\"password\"}\r\n                        id={\"password\"}\r\n                        type={\"password\"}\r\n                        className={classes.inputPassword}\r\n                        placeholder={\"enter password\"}\r\n                        {...register(\"password\", {\r\n                           required: \"Это поле обязательно!\",\r\n                           minLength: {\r\n                              value: 5,\r\n                              message: \"Минимум 5 символов!\",\r\n                           },\r\n                           maxLength: {\r\n                              value: 40,\r\n                              message: \"Максимум 20 символов!\",\r\n                           },\r\n                        })}\r\n                     />\r\n                     {errors?.password && (\r\n                        <span> {errors?.password?.message || \"Error\"}</span>\r\n                     )}\r\n                     {props.captchaUrl && (\r\n                        <div className={classes.loginConteiner}>\r\n                           <label htmlFor=\"captcha\">Captcha</label>\r\n                           <img src={props.captchaUrl} alt=\"\" />\r\n                           <input\r\n                              name={\"captcha\"}\r\n                              placeholder={\"enter captcha\"}\r\n                              {...register(\"captcha\", {\r\n                                 required: \"Это поле обязательно!\",\r\n                              })}\r\n                           />\r\n                        </div>\r\n                      )}\r\n                     <div className={classes.checkbox_showPassword}>\r\n                        <input\r\n                           type=\"checkbox\"\r\n                           id={\"showPassword\"}\r\n                           onClick={showPassword}\r\n                        />\r\n                        Show Password\r\n                     </div>\r\n                  </div>\r\n                  <div className={classes.checkbox_rememberMy}>\r\n                     <input\r\n                        type={\"checkbox\"}\r\n                        name={\"rememberMe\"}\r\n                        {...register(\"rememberMe\")}\r\n                     />\r\n                     <label htmlFor=\"rememberMe\">Remember my</label>\r\n                  </div>\r\n                  <input\r\n                     type={\"submit\"}\r\n                     name={\"submit\"}\r\n                     className={classes.btn_submit}\r\n                     disabled={!isValid}\r\n                  />\r\n               </div>\r\n            </form>\r\n         </BouncyDiv>\r\n      </div>\r\n   );\r\n}\r\n\r\nconst mapSateToProps = (state) => ({\r\n   isAuth: state.authUser.isAuth,\r\n   messageError: state.authUser.messages,\r\n   captchaUrl: state.authUser.captchaUrl,\r\n});\r\n\r\nexport default connect(mapSateToProps, { login, logout})(\r\n   LoginForm\r\n);\r\n"],"names":["flashAnimation","keyframes","wobble","BouncyDiv","styled","connect","state","isAuth","authUser","messageError","messages","captchaUrl","login","logout","props","useForm","mode","register","handleSubmit","reset","formState","errors","submittedData","isValid","React","isSubmitSuccessful","email","password","rememberMe","captcha","replace","to","className","classes","onSubmit","data","document","getElementById","checked","type","htmlFor","name","placeholder","required","minLength","value","message","maxLength","id","src","alt","onClick","x","disabled"],"sourceRoot":""}